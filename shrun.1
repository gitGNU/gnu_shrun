.\" Copyright (C) 2008 Andreas Gruenbacher <agruen@suse.de>, SUSE Labs
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..

.TH shrun 1 "November 1, 2008" "shrun v0.9" "Shell Run \- A Testing Tool"

.SH NAME
shrun \- Shell Run

.SH SYNOPSIS
.B shrun
.RI [ options "] [" script ]

.SH DESCRIPTION
Takes a script that defines a number of shell commands, their input, and
their expected output, runs those tests, and compares the result. When
the expected and actual output of a command differs, the line-wise
differences are shown in a side-by-side view. Reports which tests
succedded and failed, followed by a summary.

When invoked with a
.I script
argument, the specified script is run. Otherwise, the script is read
from standard input (and the script itself cannot read from standard
input).  Exits with a status of
.B 0
if all test commands succeeded, and
.B 1
otherwise.

.SH OPTIONS

.IP "--timeout=\fIn\fR" 5
Change the command timeout to \fIn\fR seconds. If \fIn\fR is 0, timeouts
are turned off.
.IP "--stop-at=\fIn\fR" 5
Execute the script until reaching line \fIn\fR, then drop into interactive
mode. In interactive mode, additional shell commands may be entered. The
script continues after pressing ^D.
.IP "--shell=\fIpath\fR" 5
Instead of /bin/sh, use the specified shell. (Note that resuts may vary,
as many shells will not understand all the internal commands used.)
.IP "--color={never|always|auto}" 5
Colorize the output never at all, always, or only when writing to a
terminal (auto).
.IP "--no-stderr" 5
Do not redirect standard error of the shell. This allows to process error
messages out-of-band. By default, no difference is made between standard
output and standard error.

.SH TESTS SCRIPTS

Test scripts are read line-by-line. Lines starting with the characters
.BR $ ", " + ", "< ", and " >
are interpreted as parts of commands:
.B $
starts a new command,
.B +
adds another line to the current command,
.B <
adds a line of input, and
.B >
adds a line of (expected) output.
Leading whitespace before the command character is ignored, and a single
optional space chracter after the command character is ignored as well.

All commands are executed in a single shell (by default,
.IR /bin/sh ).
No quoting or translation is performed.

By default, to prevent scripts from hanging indefinitely, commands time
out after five seconds. The length of the timeout can be modified with
the 'timeout
.IR n '
special command; a timeout of 0 turns off the timeout entirely.

.SH EXAMPLES

The shrun variant of Hello World looks like this (the first line defines
the command to execute, the second line defines the expected output):
.PP
.Vb 2
\&	$ echo hello world
\&	> hello world
.Ve
.PP
The same can be achieved using standard input redirection with:
.PP
.Vb 2
\&	$ cat
\&	< hello world
\&	> hello world
.Ve
.PP
Using a shell function, this could also be written as:
.PP
.Vb 2
\&	$ hello()
\&	+ {
\&	+   echo hello world
\&	+ }
\&
\&	$ hello
\&	> hello world
.Ve
.PP
If the expected and actual output differs, as in the following command,
.PP
.Vb 2
\&	$ echo -e 'foo\\nbar\\nbaz'
\&	> foo
\&	> baz
.Ve
.PP
the differences are reported as:
.PP
.Vb 2
\&	foo | foo
\&	bar ? baz
\&	baz ? ~
.Ve
.PP
The following command would time out after ten seconds:
.PP
.Vb 2
\&	$ timeout 10
\&	$ echo faster than that
\&	> faster than that
.Ve
.PP
If all the commands above were put in a script, omitting blank lines, and
this script was run, the result would be:
.PP
.Vb 2
\&	[1] $ echo hello world -- ok
\&	[3] $ cat -- ok
\&	[6] $ hello() ... -- ok
\&	[10] $ hello -- ok
\&	[12] $ echo -e 'foo\\nbar\\nbaz' -- failed
\&	foo | foo
\&	bar ? baz
\&	baz ? ~
\&	[15] $ timeout 10 -- ok
\&	[16] $ echo faster than that -- ok
\&	7 commands (6 passed, 1 failed)
.Ve
.PP
The line numbers of commands appear in brackets, followed by the first
line of the command, followed by the status (ok or failed). At the end,
the total number of commands, and the number of passed and failed
commands is printed.

.SH IMPLEMENTATION DETAILS WORTH KNOWING ABOUT

To syncronize the command stream with the output, each command is
internally terminated by 'echo ^D'. This mechanism usually remains
hidden, but unterminated commands may lead to a loss of this
synchronization, which may cause test cases to fail in unexpected ways.
Likewise, internal commands are needed for implementing standard input
redirection.

The file descriptors 109, 110, and 111 are used internally, and must not
be used otherwise. (This is an arbitrary assignment; any file descriptor
numbers could have been chosen.)

.SH BUGS

Syntax errors in the shell are reported as
.RB ' "short result" ',
and error messages are not printed unless the --no-stderr option is
used.

.SH AUTHOR

Written by Andreas Gruenbacher.

.SH COPYRIGHT

Copyright (C) 2008 Andreas Gruenbacher, SUSE Labs.
License: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
